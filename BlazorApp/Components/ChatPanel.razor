@implements IDisposable

<main class="chat-main-wrapper">

    <div class="chat-header">

        <div class="chat-header-contact-master">
            <div class="chat-header-contact-profile-pic"></div>

            <div class="chat-header-contact-name">
                Blazor Chat

                <div class="chat-header-contact-connection-display">
                    Online
                </div>
            </div>

        </div>
        <div class="chat-header-contact-actions">
            <span class="material-icons" @onclick="() => UnusedFunction()" id="video-call">
                videocam
            </span>
            <span class="material-icons" @onclick="() => DisconnectServer()" id="chat-logout">
                close
            </span>
        </div>
    </div>

    <div class="chat-conversation-wrapper" id="chat-wrapper">

        @for (int i = 0; i < _Messages.Count; i++)
        {
            <div class="contact-message-wrapper">
                <div class="contact-message-box-style"></div>
                <div class="contact-message-box">
                    <div class="contact-message-box-p">
                        @_Messages[i].Message
                    </div>
                    <span style="font-size:13px; color:darkgray">@_Messages[i].Sender.FullName</span>
                </div>
            </div>
        }

    </div>

    <div class="chat-user-message-wrapper">

        <span class="material-icons" id="emoji" onclick="emojiWindow()">
            sentiment_satisfied_alt
        </span>

        <p class="attach-file-wrapper">

            <input type="file" name="attach-file" id="attach-file-input">
            <label for="attach-file-input" class="material-icons" id="attach-file" onclick="attachFile()">
                attach_file
            </label>
        </p>

        <div class="chat-user-message-form-wrapper">
            <input type="text" name="" @bind-value="@_Message" id="user-message-form" placeholder="Mesajınız...">
        </div>

        <span class="material-icons" id="send-message" @onclick="@(() => SendMessage(_Message))">
            send
        </span>
        @*<div class="emojis-wrapper" id="emojis-wrapper">

        </div>*@

    </div>
</main>
@code { 


    List<MessageModel> _Messages = new List<MessageModel>();

    string _Message = string.Empty;

    protected override void OnInitialized()
    {
        ChatService.GetMessage += GetMessage;
        base.OnInitialized();
    }

    private void UnusedFunction()
    {
        AlertService.ShowErrorAlert("Bu fonksiyon henüz kullanılamaz !");
    }

    private void GetMessage(MessageModel message)
    {
        _Messages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(string message)
    {
        if (string.IsNullOrEmpty(message))
            return;

        MessageModel messageModel = new MessageModel();
        messageModel.Sender = LoginService.User;
        messageModel.Message = message;

        await ChatService.SendMessage(messageModel);
        _Message = string.Empty;
    }

    private async Task DisconnectServer()
    {
        try
        {
            await LoginService.LogOut();
            NavigationManager.NavigateTo("/login", false);
            AlertService.ShowSuccessAlert("Sistemden Çıkış Yaptınız...");
        }
        catch (Exception e)
        {
            AlertService.ShowErrorAlert("Sistemden Çıkış Yapamadınız...");
        }
    }

    [Inject]
    IAlertService AlertService { get; set; }

    [Inject]
    IChatService ChatService { get; set; }

    [Inject]
    ILoginService LoginService { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    public void Dispose()
    {
       ChatService.GetMessage += GetMessage;
    }
}