<main class="chat-main-wrapper">
    <!-- Área do chat -->

    <div class="chat-header">
        <!--Informações sobre o contato selecionado para troca de mensagens -->

        <div class="chat-header-contact-master">
            <div class="chat-header-contact-profile-pic"></div>

            <div class="chat-header-contact-name">
                Chat Plus

                <div class="chat-header-contact-connection-display">
                    Online
                </div>
            </div>

        </div>
        <div class="chat-header-contact-actions">

            <span class="material-icons" @onclick="() => UnusedFunction()" id="video-call">
                videocam
            </span>
            <span class="material-icons" @onclick="() => UnusedFunction()" id="chat-contact-messages-options">
                more_vert
            </span>

        </div>



    </div>

    <div class="chat-conversation-wrapper" id="chat-wrapper">
        <!-- Área das mensagens -->

        @*@for (int i = 0; i < messages.Count; i++)
        {
            <div class="contact-message-wrapper">
                <div class="contact-message-box-style"></div>
                <div class="contact-message-box">
                    <div class="contact-message-box-p">
                        @messages[i];
                    </div>
                </div>
            </div>
        }*@


    </div>


    <div class="chat-user-message-wrapper">
        <!-- Área onde o usuário digita as mensagens -->

        <span class="material-icons" id="emoji" onclick="emojiWindow()">
            sentiment_satisfied_alt
        </span>

        <p class="attach-file-wrapper">

            <input type="file" name="attach-file" id="attach-file-input">
            <label for="attach-file-input" class="material-icons" id="attach-file" onclick="attachFile()">
                attach_file
            </label>
        </p>

        <div class="chat-user-message-form-wrapper">
            <input type="text" name="" id="user-message-form" placeholder="Mesajınız...">
        </div>

        <span class="material-icons" id="send-message" onclick="sendMessage()">
            send
        </span>
        <div class="emojis-wrapper" id="emojis-wrapper">
            <!-- Emojis container -->

            <ul class="emoji-list">

                <li class="emoji-item" id="grinning-face" onclick="insertEmoji(emojiCode = 1)">&#x1F600;</li>  <!-- grinning face -->
                <li class="emoji-item" id="grinning-face-with-smiling-eyes" onclick="insertEmoji( emojiCode = 2)">&#x1F604;</li>  <!-- grinning face with smiling eyes -->
                <li class="emoji-item" id="grinning-face-with-sweat" onclick="insertEmoji( emojiCode =3)">&#x1F605;</li>  <!-- grinning face with sweat -->
                <li class="emoji-item" id="face-with-tears-of-joy" onclick="insertEmoji( emojiCode =4)">&#x1F602;</li>  <!-- face with tears of joy -->
                <li class="emoji-item" id="winking-face" onclick="insertEmoji( emojiCode = 5)">&#x1F609;</li>  <!-- winking face -->
                <li class="emoji-item" id="face-blowing-a-kiss" onclick="insertEmoji(emojiCode = 6)">&#x1F618;</li>  <!-- face blowing a kiss -->
                <li class="emoji-item" id="angry-face" onclick="insertEmoji(emojiCode = 7)">&#x1F620;</li>  <!--angry face -->
                <li class="emoji-item" id="heart" onclick="insertEmoji(emojiCode = 8)">&#x1F49B;</li>  <!-- heart -->
                <li class="emoji-item" id="thumbs-up" onclick="insertEmoji(emojiCode = 9)">&#x1F44D;</li>  <!-- thumbs up -->
                <li class="emoji-item" id="thumbs-down" onclick="insertEmoji(emojiCode = 10)">&#x1F44E;</li>  <!-- thumbs down -->

            </ul>
        </div>

    </div>


</main>
@code {

    private void UnusedFunction()
    {
        AlertService.ShowErrorAlert("Bu fonksiyon henüz kullanılamaz !");
    }

    //List<string> messages = new List<string>();

    //protected override void OnInitialized()
    //{
    //    messages.Add("Merhaba bu test mesajıdır !");
    //    base.OnInitialized();
    //}

    //public void AddMessage(string message)
    //{
    //    messages.Add(message);
    //    StateHasChanged();
    //}

    [Inject]
    IAlertService AlertService { get; set; }
}
