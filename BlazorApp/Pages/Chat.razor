@implements IDisposable
@page "/Chat"

<div class="background-wrapper" id="main">

    <OnlineUsers ChatUsers="ChatService.OnlineUsers" />

    <ChatPanel />

</div>

@code{

    protected override async Task OnInitializedAsync()
    {
        if (!IsConnected)
        {
            NavigationManager.NavigateTo("/login", false);
        }
        else
        {
            await ChatService.GetOnlineUsers();
            ChatService.StatesChanged += UpdateState;
            ChatService.UserConnected += UserConnected;
            ChatService.UserDisconnected += UserDisconnected;
        }
    }

    public void UpdateState()
    {
        InvokeAsync(StateHasChanged);
    }

    private void UserConnected(UserEventArgs e)
    {
        AlertService.ShowSuccessAlert(string.Format("{0} İsimli Kullanıcı Sunucuya Bağlandı...", e.User.FullName));
    }

    private void UserDisconnected(UserEventArgs e)
    {
        AlertService.ShowWarningAlert(string.Format("{0} İsimli Kullanıcı Sunucudan Ayrıldı...", e.User.FullName));
    }

    private bool IsConnected
    {
        get
        {
            if (LoginService.User == null)
                return false;
            else
                return LoginService.User.IsConnect;
        }
    }

    [Inject]
    IChatService ChatService { get; set; }

    [Inject]
    ILoginService LoginService { get; set; }

    [Inject]
    IAlertService AlertService { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }


    public void Dispose()
    {
        ChatService.StatesChanged -= UpdateState;
        ChatService.UserConnected -= UserConnected;
        ChatService.UserDisconnected -= UserDisconnected;
    }
}
